; 🚀 PlatformIO Project Configuration File for Ground-Lora
; 📡 ESP32-based LoRa Ground Control Station with PS5 Controller
;
;   Build options: build flags, source filter 🔧
;   Upload options: custom upload port, speed and extra flags 📤
;   Library options: dependencies, extra library storages 📚
;   Advanced options: extra scripting ⚙️
;   Testing options: unit test configuration 🧪
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html 📖

[env:ttgo-lora32-v21]
platform = espressif32          ; 📱 ESP32 platform
board = ttgo-lora32-v21         ; 🎯 TTGO LoRa32 v2.1 board
framework = arduino             ; 🤖 Arduino framework
monitor_speed = 115200          ; 📊 Serial monitor baud rate
lib_deps = 
	thingpulse/ESP8266 and ESP32 OLED driver for SSD1306 displays@^4.5.0  ; 🖥️ OLED display driver
	sandeepmistry/LoRa@^0.8.0   ; 📡 LoRa communication library

; 🧪 Unit Testing Configuration
test_framework = unity          ; 🎯 Unity testing framework
test_speed = 115200            ; 📊 Test serial monitor speed
test_build_src = yes           ; 🔧 Build source files for testing
test_filter = 
    test_utilities             ; 🛠️ Basic utility function tests
    test_lora                  ; 📡 LoRa communication tests  
    test_ps5                   ; 🎮 PS5 controller tests
    test_display               ; 🖥️ Display functionality tests
    test_safety                ; 🛡️ Safety system tests
    test_integration           ; 🔄 Integration tests
    test_main                  ; 🚀 Main system tests

; 🧪 Test Environment (for running tests on target hardware)
[env:test]
platform = espressif32
board = ttgo-lora32-v21
framework = arduino
test_framework = unity
test_speed = 115200
test_build_src = yes
lib_deps = 
	thingpulse/ESP8266 and ESP32 OLED driver for SSD1306 displays@^4.5.0
	sandeepmistry/LoRa@^0.8.0
build_flags = 
    -DUNIT_TEST                ; 🧪 Enable unit testing mode
    -DTEST_MODE               ; 🧪 Test mode flag
monitor_speed = 115200

; 🖥️ Native Testing Environment (for running tests on development machine)
[env:native]
platform = native             ; 💻 Native platform for local testing
test_framework = unity         ; 🎯 Unity testing framework  
test_build_src = yes          ; 🔧 Build source files
test_filter = 
    test_utilities            ; 🛠️ Can run utility tests natively
build_flags = 
    -DUNIT_TEST              ; 🧪 Enable unit testing mode
    -DNATIVE_TEST            ; 💻 Native testing flag